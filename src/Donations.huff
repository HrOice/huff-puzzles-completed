/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 
    dup1 iszero receive jumpi

    0xe0 shr
    __FUNC_SIG(donated) eq donated jumpi 
    0x00 0x00 revert
    donated:
        0x04 calldataload // [calldata ]
        0x00 mstore // stack[] mem[address] caller is key
        0x00 0x20 mstore // stack[] mem[address,position] the position's purpose is to divide different mapping. It can be ignore in this excrise.

        0x40 0x00 sha3 // 0x40 is the bytes length of bytes(caller) and bytes(position)
        sload // [oldValue]
        returndatasize
        mstore

        0x20 returndatasize return

    receive:
        caller // [caller]
        0x00 mstore // stack[] mem[0xcaller] caller is key
        0x00 0x20 mstore // stack[] mem[0xcaller,0xposition] 

        0x40 0x00 sha3 // 0x40 is the bytes length of bytes(caller) and bytes(position)

        dup1 sload // [oldValue, position]

        callvalue // [value, oldValue, position]
        add // [newValue, position]

        swap1 

        sstore //[]
}