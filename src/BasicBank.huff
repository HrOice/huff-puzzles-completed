/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro GET_SLOT() = takes(1) returns(1) {
    // caculate the storage poisition of mapping[msg.sender]
       //     caller  takes[0]
        0x00 mstore // mem[msg.sender]
        0x01 // [mapping_1, msg.sender] assume that there is one mapping
        0x20 mstore // mem[msg.sender, mapping_1]
        0x40 0x00
        sha3 // [keccak256_position]
}

#define macro MAIN() = takes(0) returns(0) {
    calldatasize iszero receive jumpi
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(withdraw) eq withdraw jumpi
    0x00 0x00 revert

    balanceOf:
        // add balance of msg.sender
        caller
        GET_SLOT() // [keccak256_position]
         // load first to find oldValue
        sload // [oldValue, keccak256_position]
        returndatasize mstore
        0x20 returndatasize return
    withdraw:
    // add balance of msg.sender
        caller // [msg.sender]
        GET_SLOT()

        // load first to find oldValue
        dup1 sload // [oldValue, keccak256_position]
        0x04 calldataload // [withdrawValue, oldValue, keccak256_position]
        dup2 dup2 // to compare
        gt notEnough jumpi // revert balance not enougn
        swap1 sub // [newValue, position]

        swap1 sstore // store newValue in storage
        // send
        returndatasize returndatasize returndatasize returndatasize // [in, insize, out, outsize] 
        0x04 calldataload // value
        caller // msg.sender
        0xffff // gas
        call
        0x00 0x00 return

    receive:
        // add balance of msg.sender
        caller // [msg.sender]
        GET_SLOT()

        // load first to find oldValue
        dup1 sload // [oldValue, keccak256_position]

        callvalue // [msg.value, oldValue, keccak256_position]
        add // [newValue, position]

        swap1 sstore // [] store newValue to mapping[msg.sender]
        stop
    notEnough: 
        0x00 0x00 revert


}
