
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define constant START = 0x00

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi

    0x00 0x00 revert

    pushh:
        PUSHH()
    popp:
        POPP()
    read:
        READ()
    length:
        LENGTH()
    write:
        WRITE()

 }

 #define macro WRITE() = takes(0) returns(0) { 
    0x24 calldataload // [value]
    0x04 calldataload // [index, value]
    CHECK_INDEX() // [position, value]
    sstore
    stop
 }

#define macro LENGTH() = takes(0) returns(0) {
    [START] sload // oldLength [oldlength]
    returndatasize mstore
    0x20 returndatasize return
 }
    // return position take index
 #define macro CHECK_INDEX() = takes(1) returns(1) {
    // [index]
    [START] sload // oldLength [oldlength, index]
    dup1 iszero outOfBounds jumpi // revert if length is zero
    0x01 swap1 sub // [maxIndex, index]
    dup2 swap1 // [maxIndex, index, index]
    lt outOfBounds jumpi // [index]
    0x20 mul 0x20 add // [position]
    go jump
    outOfBounds:
        __ERROR(OutOfBounds)
        returndatasize mstore
        0x04 returndatasize revert
    go:
 }

  #define macro READ() = takes(0) returns(0) {
    0x04 calldataload // [index]
    CHECK_INDEX() // [position]
    sload returndatasize mstore
    0x20 returndatasize return
 }

 #define macro PUSHH() = takes(0) returns(0) {
    // storage[length, e1, e2, e3] position = 0x20 + 0x20 * oldlength
    0x04 calldataload // [item]
    [START] sload // oldLength [oldlength, item]
    
    dup1 0x20 mul 0x20 add // position [position, oldlength, item]
    
    dup3 
    swap1 sstore // [oldlength, item]
    0x01 add 
    dup1 [START] sstore // []    
    returndatasize mstore
    0x20 returndatasize return
 }

  #define macro POPP() = takes(0) returns(0) {
    0x04 calldataload // [item]
    [START] sload // oldLength [oldlength, item]
    dup1 iszero zeroArray jumpi
    0x01 swap1 sub  // [newLength, item]
    dup1 [START] sstore
    0x20 mul 0x20 add // [position, oldlength, item] (length-1) * 20 + start
    sload
    returndatasize mstore
    0x20 returndatasize return

    zeroArray:
        __ERROR(ZeroArray)
        returndatasize mstore
        0x04 returndatasize revert
 }

