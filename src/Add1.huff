
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xE0
    shr

    __FUNC_SIG(add1) eq add1 jumpi
    0x00 0x00 revert

    add1:
        0x04 calldataload // [v]
        dup1 // [v, v]
        0x01 // [1, v, v]
        add // [v+1, v]

        0x00 // 0, v+1, v
        swap1 gt // 1 or 0, v
        success jumpi
            0x00 0x00 revert
        success:
            0x01 add

        0x00
        mstore

        0x20 0x00 return
}